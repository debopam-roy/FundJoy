{
  "language": "Solidity",
  "sources": {
    "contracts/FundJoy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract FundJoy { //} is ERC721 {\n    address public owner;\n    uint public totalFund;\n\n    enum EventStatus { Pending, Executed }\n\n    struct Donor {\n        string donorName;\n        uint donatedAmount;\n    }\n\n    struct FundraisingEvent {\n        string eventName;\n        uint requiredFund;\n        EventStatus status;\n    }\n\n    struct Transaction {\n        uint amount;\n        address toAddress;\n        address fromAddress;\n    }\n\n    mapping(address => Donor) public donors; \n    mapping(address => string) public suggestions;\n\n    FundraisingEvent[] public events;\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier validDeposit(uint _amount) {\n        require(_amount > 0, \"Deposit amount must be greater than 0\");\n        _;\n    }\n\n    modifier validDonor(string memory _donorName) {\n        require(bytes(_donorName).length > 0, \"Donor name cannot be empty.\");\n        _;\n    }\n\n    modifier validWithdrawal(uint _amount) {\n        require(totalFund >= _amount && _amount > 0, \"Invalid withdrawal amount\");\n        _;\n    }\n\n    modifier validEvent(string memory _eventName, uint _requiredFund) {\n        require(bytes(_eventName).length > 0, \"Event name can't be null\");\n        require(_requiredFund > 0, \"Required funds must be greater than 0\");\n        _;\n    }\n\n    modifier validEvents() {\n        require(events.length > 0, \"No events to be executed. Plan something!\");\n        _;\n    }\n\n    constructor() { //ERC721(\"FundJoyToken\", \"FJT\") {\n        owner = payable(msg.sender);\n    }\n\n    function donateFund(string memory _donorName, string memory _suggestion) public payable validDonor(_donorName) validDeposit(msg.value) {\n        \n        (bool success,) = owner.call{value: msg.value}(\"\");\n        require(success, \"Transaction failed! Please try again.\");\n        totalFund += msg.value;\n\n        if (donors[msg.sender].donatedAmount > 0) {\n            donors[msg.sender].donatedAmount += msg.value;\n        } else {\n            donors[msg.sender] = Donor(_donorName, msg.value);\n        }\n\n        if(bytes(_suggestion).length > 0) {\n            suggestions[msg.sender] = _suggestion;\n        }\n\n        recordTransaction(msg.value, msg.sender);\n    }\n\n    function withdrawFund(uint _amount) public payable onlyOwner validWithdrawal(_amount) {\n        payable(owner).transfer(_amount);\n        totalFund -= _amount;\n        recordTransaction(_amount, owner);\n    }\n\n    function postEvent(string memory _eventName, uint _requiredFund) public onlyOwner validEvent(_eventName, _requiredFund) {\n        events.push(FundraisingEvent(_eventName, _requiredFund, EventStatus.Pending));\n    }\n\n    function executeEvents() public onlyOwner validEvents {\n        for(uint i = 0; i < events.length; i++) {\n            if(events[i].requiredFund <= totalFund && events[i].status == EventStatus.Pending) {\n                withdrawFund(events[i].requiredFund);\n                events[i].status = EventStatus.Executed;\n            }\n        }\n    }\n\n    function recordTransaction(uint _amount, address _toAddress) internal {\n        transactions.push(Transaction(_amount, _toAddress, msg.sender));\n    }\n\n    receive() external payable {\n        if (msg.sender != owner) {\n            donateFund(\"Anonymous\", \"\");\n        }\n    }\n\n    fallback() external payable {\n        revert(\"Fallback function not allowed\");\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}